#pragma once

#include <fstream>

namespace Sauron
{
  struct Segment
  {
    NUI_SKELETON_POSITION_INDEX a;
    NUI_SKELETON_POSITION_INDEX b;
  };

  static Segment g_Segments[] = {
    // Torso
    {NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_SPINE},
    {NUI_SKELETON_POSITION_SPINE, NUI_SKELETON_POSITION_SHOULDER_CENTER},
    {NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_HEAD},

    // Top left side of body
    {NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_SHOULDER_LEFT},
    {NUI_SKELETON_POSITION_SHOULDER_LEFT, NUI_SKELETON_POSITION_ELBOW_LEFT},
    {NUI_SKELETON_POSITION_ELBOW_LEFT, NUI_SKELETON_POSITION_WRIST_LEFT},
    {NUI_SKELETON_POSITION_WRIST_LEFT, NUI_SKELETON_POSITION_HAND_LEFT},

    // Top right side of body
    {NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_SHOULDER_RIGHT},
    {NUI_SKELETON_POSITION_SHOULDER_RIGHT, NUI_SKELETON_POSITION_ELBOW_RIGHT},
    {NUI_SKELETON_POSITION_ELBOW_RIGHT, NUI_SKELETON_POSITION_WRIST_RIGHT},
    {NUI_SKELETON_POSITION_WRIST_RIGHT, NUI_SKELETON_POSITION_HAND_RIGHT},

    // Bottom left side of body
    {NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_HIP_LEFT},
    {NUI_SKELETON_POSITION_HIP_LEFT, NUI_SKELETON_POSITION_KNEE_LEFT},
    {NUI_SKELETON_POSITION_KNEE_LEFT, NUI_SKELETON_POSITION_ANKLE_LEFT},
    {NUI_SKELETON_POSITION_ANKLE_LEFT, NUI_SKELETON_POSITION_FOOT_LEFT},

    // Bottom right side of body
    {NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_HIP_RIGHT},
    {NUI_SKELETON_POSITION_HIP_RIGHT, NUI_SKELETON_POSITION_KNEE_RIGHT},
    {NUI_SKELETON_POSITION_KNEE_RIGHT, NUI_SKELETON_POSITION_ANKLE_RIGHT},
    {NUI_SKELETON_POSITION_ANKLE_RIGHT, NUI_SKELETON_POSITION_FOOT_RIGHT},
  };
  #define SEGMENT_COUNT (sizeof(g_Segments) / sizeof(g_Segments[0]))

  #define SQUARE(x) ((x)*(x))

  class ActorDetector
  {
  public:
    ActorDetector();
    ~ActorDetector();

    void FindSkeletalLengths( NUI_SKELETON_DATA * pSkel, HWND hWnd, int WhichSkeletonColor );

  private:
    std::fstream m_output;
    DWORD m_lastUpdateTime;
    FLOAT m_spinePosHist[2];
    char m_next;
  };
}
